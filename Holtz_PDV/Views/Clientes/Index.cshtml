@using X.PagedList.Mvc.Core;
@using X.PagedList;
@model PaginatedList<Holtz_PDV.Models.Cliente>
@{
    ViewData["Title"] = "Listagem de Clientes";
}

<h2>@ViewData["Title"]</h2>

<p>
    <a asp-action="Create" class="btn btn-info">Novo</a>
</p>


<table class="table table-striped table-hover">
    <thead>
        <tr class="text-uppercase bg-info">
            <th>
                CliCod
            </th>
            <th>
                CliRaz
            </th>
            <th>
                CliCpfCnpj
            </th>
            <th></th> <!-- Para criar uma titulo vazio para as funções editar, excluir etc -->
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.CliCod)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CliRaz)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CliCpfCnpj)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.CliCod" class="btn btn-primary btn-sm">Editar</a>
                    <a asp-action="Details" asp-route-id="@item.CliCod" class="btn btn-light btn-sm">Detalhes</a>
                    <a asp-action="Delete" asp-route-id="@item.CliCod" class="btn btn-danger btn-sm">Remover</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{ 
    var prevDisabled = !Model.PreviousPage ? "disabled" : "";
    var nextDisabled = !Model.NestPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex -1)"
   class="btn btn-default @prevDisabled">
   Previous
</a>

<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex +1)"
   class="btn btn-default @nextDisabled">
    Next
</a>